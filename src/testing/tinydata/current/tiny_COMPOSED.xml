<METASCHEMA xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             abstract="no"
             module="tiny"
             _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml">
   <INFO info-type="objects-used">Seeing assembly#tiny:TINY, field#tiny:title, field#tiny:term, assembly#tiny:part, assembly#tiny:sheet, flag#tiny:key, flag#tiny:class, field#tiny:item, field#tiny:note</INFO>
   <schema-name>Tiny Data Model</schema-name>
   <schema-version>0.0.2</schema-version>
   <short-name>tiny</short-name>
   <namespace>http://csrc.nist.gov/ns/metaschema-xslt/tinydata</namespace>
   <json-base-uri>http://csrc.nist.gov/ns/metaschema-xslt/tinydata</json-base-uri>
   <remarks>
      <h1>Tiny Metaschema</h1>
      <p>A metaschema can be small and yet deep.</p>
   </remarks>
   <define-assembly _metaschema-xml-id="/assembly/tiny/TINY"
                     _metaschema-json-id="/assembly/tiny/TINY"
                     scope="global"
                     name="TINY"
                     module="tiny"
                     _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                     _key-name="tiny:TINY"
                     _using-root-name="TINY">
      <formal-name>Tiny Data</formal-name>
      <description>A minimally described data set.</description>
      <root-name>TINY</root-name>
      <define-flag _step="id"
                    _key="id"
                    _metaschema-xml-id="/assembly/tiny/TINY/id"
                    _metaschema-json-id="/assembly/tiny/TINY/id"
                    required="yes"
                    as-type="token"
                    name="id"
                    _using-name="id"
                    _in-xml-name="id"
                    _in-json-name="id">
         <formal-name>Tiny ID</formal-name>
         <description>An identifier.</description>
      </define-flag>
      <model>
         <field _step="title"
                 _key="title"
                 _metaschema-xml-id="/assembly/tiny/TINY/title"
                 _metaschema-json-id="/assembly/tiny/TINY/title"
                 max-occurs="1"
                 min-occurs="1"
                 ref="title"
                 _key-ref="tiny:title"
                 _using-name="title"
                 _in-xml-name="title"
                 _in-json-name="title"/>
         <field _step="term"
                 _key="terminology"
                 _group-name="terminology"
                 _metaschema-xml-id="/assembly/tiny/TINY/term"
                 _metaschema-json-id="/assembly/tiny/TINY/terminology"
                 max-occurs="unbounded"
                 min-occurs="0"
                 ref="term"
                 _key-ref="tiny:term"
                 _using-name="term"
                 _in-xml-name="term"
                 _in-json-name="terminology">
            <group-as name="terminology"/>
         </field>
         <define-field _step="stuff"
                        _key="stuff"
                        _metaschema-xml-id="/assembly/tiny/TINY/stuff"
                        _metaschema-json-id="/assembly/tiny/TINY/stuff"
                        max-occurs="1"
                        min-occurs="0"
                        in-xml="UNWRAPPED"
                        collapsible="no"
                        as-type="markup-multiline"
                        name="stuff"
                        _using-name="stuff"
                        _in-xml-name="p ul ol pre table h1 h2 h3 h4 h5 h6"
                        _in-json-name="stuff">
            <formal-name>Stuff</formal-name>
            <description>Some amount of tiny stuff.</description>
         </define-field>
         <assembly _step="part"
                    _key="parts"
                    _group-name="parts"
                    _metaschema-xml-id="/assembly/tiny/TINY/part"
                    _metaschema-json-id="/assembly/tiny/TINY/parts"
                    max-occurs="unbounded"
                    min-occurs="0"
                    ref="part"
                    _key-ref="tiny:part"
                    _using-name="part"
                    _in-xml-name="part"
                    _in-json-name="parts">
            <group-as name="parts"/>
         </assembly>
         <field _step="notes/notes"
                 _key="notes"
                 _group-name="notes"
                 _metaschema-xml-id="/assembly/tiny/TINY/notes/notes"
                 _metaschema-json-id="/assembly/tiny/TINY/notes"
                 max-occurs="unbounded"
                 min-occurs="0"
                 ref="note"
                 _key-ref="tiny:note"
                 in-xml="WRAPPED"
                 _using-name="note"
                 _in-xml-name="notes"
                 _in-json-name="notes">
            <group-as name="notes" in-xml="GROUPED"/>
         </field>
      </model>
   </define-assembly>
   <define-field _metaschema-xml-id="/field/tiny/title"
                  _metaschema-json-id="/field/tiny/title"
                  collapsible="no"
                  as-type="markup-line"
                  scope="global"
                  name="title"
                  module="tiny"
                  _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                  _key-name="tiny:title">
      <formal-name>Title</formal-name>
      <description>markup-line example.</description>
   </define-field>
   <define-field _metaschema-xml-id="/field/tiny/term"
                  _metaschema-json-id="/field/tiny/term"
                  collapsible="no"
                  as-type="string"
                  scope="global"
                  name="term"
                  module="tiny"
                  _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                  _key-name="tiny:term">
      <formal-name>Term</formal-name>
      <description>Simple string value example.</description>
      <define-flag _step="id"
                    _key="id"
                    _metaschema-xml-id="/field/tiny/term/id"
                    _metaschema-json-id="/field/tiny/term/id"
                    required="yes"
                    as-type="token"
                    name="id"
                    _using-name="id"
                    _in-xml-name="id"
                    _in-json-name="id">
         <formal-name>Term identifier</formal-name>
         <description>A token identifying this term uniquely within the document.</description>
      </define-flag>
      <remarks>
         <p>For a more extensive model supporting definitions, acronyms etc. build this out into an assembly. As a field, this supports some control over the vocabulary and formatting without heavier embedded metadata.</p>
         <p>Of course you could always make a structured glossary out of regular and controlled parts for your terminology, and use this inside it, potentially with title/insert.</p>
      </remarks>
   </define-field>
   <define-field _metaschema-xml-id="/field/tiny/note"
                  _metaschema-json-id="/field/tiny/note"
                  in-xml="WITH_WRAPPER"
                  collapsible="no"
                  as-type="markup-multiline"
                  scope="global"
                  name="note"
                  module="tiny"
                  _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                  _key-name="tiny:note">
      <formal-name>Note</formal-name>
      <description>Wrapped markup-multiline example.</description>
   </define-field>
   <define-assembly _metaschema-xml-id="/assembly/tiny/part"
                     _metaschema-json-id="/assembly/tiny/part"
                     scope="global"
                     name="part"
                     module="tiny"
                     _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                     _key-name="tiny:part">
      <formal-name>Tiny part</formal-name>
      <description>A bit of tiny data.</description>
      <model>
         <field _step="title"
                 _key="title"
                 _metaschema-xml-id="/assembly/tiny/part/title"
                 _metaschema-json-id="/assembly/tiny/part/title"
                 max-occurs="1"
                 min-occurs="1"
                 ref="title"
                 _key-ref="tiny:title"
                 _using-name="title"
                 _in-xml-name="title"
                 _in-json-name="title"/>
         <field _step="term"
                 _key="terminology"
                 _group-name="terminology"
                 _metaschema-xml-id="/assembly/tiny/part/term"
                 _metaschema-json-id="/assembly/tiny/part/terminology"
                 max-occurs="unbounded"
                 min-occurs="0"
                 ref="term"
                 _key-ref="tiny:term"
                 _using-name="term"
                 _in-xml-name="term"
                 _in-json-name="terminology">
            <group-as name="terminology"/>
         </field>
         <define-field _step="stuff"
                        _key="stuff"
                        _metaschema-xml-id="/assembly/tiny/part/stuff"
                        _metaschema-json-id="/assembly/tiny/part/stuff"
                        max-occurs="1"
                        min-occurs="0"
                        in-xml="UNWRAPPED"
                        collapsible="no"
                        as-type="markup-multiline"
                        name="stuff"
                        _using-name="stuff"
                        _in-xml-name="p ul ol pre table h1 h2 h3 h4 h5 h6"
                        _in-json-name="stuff">
            <formal-name>Stuff</formal-name>
            <description>Some amount of tiny stuff.</description>
         </define-field>
         <assembly _step="part"
                    _key="parts"
                    _group-name="parts"
                    _metaschema-xml-id="/assembly/tiny/part/part"
                    _metaschema-json-id="/assembly/tiny/part/parts"
                    max-occurs="unbounded"
                    min-occurs="0"
                    ref="part"
                    _key-ref="tiny:part"
                    _using-name="part"
                    _in-xml-name="part"
                    _in-json-name="parts">
            <group-as name="parts"/>
         </assembly>
         <assembly _step="sheet"
                    _key="sheets"
                    _group-name="sheets"
                    _metaschema-xml-id="/assembly/tiny/part/sheet"
                    _metaschema-json-id="/assembly/tiny/part/sheets"
                    max-occurs="unbounded"
                    min-occurs="0"
                    ref="sheet"
                    _key-ref="tiny:sheet"
                    _using-name="sheet"
                    _in-xml-name="sheet"
                    _in-json-name="sheets">
            <group-as name="sheets"/>
         </assembly>
         <field _step="note"
                 _key="note"
                 _metaschema-xml-id="/assembly/tiny/part/note"
                 _metaschema-json-id="/assembly/tiny/part/note"
                 max-occurs="1"
                 min-occurs="0"
                 ref="note"
                 _key-ref="tiny:note"
                 in-xml="WRAPPED"
                 _using-name="note"
                 _in-xml-name="note"
                 _in-json-name="note"/>
      </model>
   </define-assembly>
   <define-assembly _metaschema-xml-id="/assembly/tiny/sheet"
                     _metaschema-json-id="/assembly/tiny/sheet"
                     scope="global"
                     name="sheet"
                     module="tiny"
                     _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                     _key-name="tiny:sheet">
      <formal-name>Tiny sheet</formal-name>
      <description>A list or grid of data points (items), or an entry (row or line item) in such a list or grid that contains such a list or grid.</description>
      <flag _step="key"
             _key="key"
             _metaschema-xml-id="/assembly/tiny/sheet/key"
             _metaschema-json-id="/assembly/tiny/sheet/key"
             as-type="token"
             required="no"
             ref="key"
             _key-ref="tiny:key"
             _using-name="key"
             _in-xml-name="key"
             _in-json-name="key"/>
      <flag _step="class"
             _key="class"
             _metaschema-xml-id="/assembly/tiny/sheet/class"
             _metaschema-json-id="/assembly/tiny/sheet/class"
             as-type="string"
             required="no"
             ref="class"
             _key-ref="tiny:class"
             _using-name="class"
             _in-xml-name="class"
             _in-json-name="class"/>
      <model>
         <field _step="title"
                 _key="title"
                 _metaschema-xml-id="/assembly/tiny/sheet/title"
                 _metaschema-json-id="/assembly/tiny/sheet/title"
                 max-occurs="1"
                 min-occurs="0"
                 ref="title"
                 _key-ref="tiny:title"
                 _using-name="title"
                 _in-xml-name="title"
                 _in-json-name="title"/>
         <define-field _step="stuff"
                        _key="stuff"
                        _metaschema-xml-id="/assembly/tiny/sheet/stuff"
                        _metaschema-json-id="/assembly/tiny/sheet/stuff"
                        max-occurs="1"
                        min-occurs="0"
                        in-xml="UNWRAPPED"
                        collapsible="no"
                        as-type="markup-multiline"
                        name="stuff"
                        _using-name="stuff"
                        _in-xml-name="p ul ol pre table h1 h2 h3 h4 h5 h6"
                        _in-json-name="stuff">
            <formal-name>Stuff</formal-name>
            <description>Some amount of tiny stuff.</description>
         </define-field>
         <choice>
            <assembly _step="entry"
                       _key="sheets"
                       _group-name="sheets"
                       _metaschema-xml-id="/assembly/tiny/sheet/entry"
                       _metaschema-json-id="/assembly/tiny/sheet/sheets"
                       max-occurs="unbounded"
                       min-occurs="0"
                       ref="sheet"
                       _key-ref="tiny:sheet"
                       _using-name="entry"
                       _in-xml-name="entry"
                       _in-json-name="sheets">
               <use-name>entry</use-name>
               <group-as name="sheets" in-json="ARRAY"/>
            </assembly>
            <field _step="item"
                    _key="items"
                    _group-name="items"
                    _metaschema-xml-id="/assembly/tiny/sheet/item"
                    _metaschema-json-id="/assembly/tiny/sheet/items"
                    max-occurs="unbounded"
                    min-occurs="0"
                    ref="item"
                    _key-ref="tiny:item"
                    _using-name="item"
                    _in-xml-name="item"
                    _in-json-name="items">
               <use-name>item</use-name>
               <group-as name="items"/>
            </field>
         </choice>
         <field _step="note"
                 _key="note"
                 _metaschema-xml-id="/assembly/tiny/sheet/note"
                 _metaschema-json-id="/assembly/tiny/sheet/note"
                 max-occurs="1"
                 min-occurs="0"
                 ref="note"
                 _key-ref="tiny:note"
                 in-xml="WRAPPED"
                 _using-name="note"
                 _in-xml-name="note"
                 _in-json-name="note"/>
      </model>
   </define-assembly>
   <define-field _metaschema-xml-id="/field/tiny/item"
                  _metaschema-json-id="/field/tiny/item"
                  collapsible="no"
                  as-type="markup-line"
                  scope="global"
                  name="item"
                  module="tiny"
                  _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                  _key-name="tiny:item">
      <formal-name>Line item</formal-name>
      <description>A value, potentially marked with @key or @class.</description>
      <flag _step="key"
             _key="key"
             _metaschema-xml-id="/field/tiny/item/key"
             _metaschema-json-id="/field/tiny/item/key"
             as-type="token"
             required="no"
             ref="key"
             _key-ref="tiny:key"
             _using-name="key"
             _in-xml-name="key"
             _in-json-name="key"/>
      <flag _step="class"
             _key="class"
             _metaschema-xml-id="/field/tiny/item/class"
             _metaschema-json-id="/field/tiny/item/class"
             as-type="string"
             required="no"
             ref="class"
             _key-ref="tiny:class"
             _using-name="class"
             _in-xml-name="class"
             _in-json-name="class"/>
      <define-flag _step="n"
                    _key="n"
                    _metaschema-xml-id="/field/tiny/item/n"
                    _metaschema-json-id="/field/tiny/item/n"
                    required="no"
                    as-type="non-negative-integer"
                    name="n"
                    _using-name="n"
                    _in-xml-name="n"
                    _in-json-name="n">
         <formal-name>N (position)</formal-name>
         <description>An indexed position (distinctive among values of parent::*/*/@n).</description>
      </define-flag>
      <constraint>
         <expect target="." test="not( @n = (../child::* except .)/@n )">
            <formal-name>Distinctive 'n' value</formal-name>
            <description>@n must be distinctive among sibling items.</description>
            <remarks>
               <p>A whole number is expected here although '0' is permitted. Values among siblings are not constrained to be ordered, only different. Ordering is up to the receiving application.</p>
            </remarks>
         </expect>
      </constraint>
      <remarks>
         <p>An application may constrain the value of the node to a datatype or other requirement, on the basis of @key, @class or other association(s).</p>
      </remarks>
   </define-field>
   <define-flag _metaschema-xml-id="/flag/tiny/key"
                 _metaschema-json-id="/flag/tiny/key"
                 as-type="token"
                 scope="global"
                 name="key"
                 module="tiny"
                 _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                 _key-name="tiny:key">
      <formal-name>Field key</formal-name>
      <description>Distinguishing a sheet or item (field) among siblings or neighbors.</description>
   </define-flag>
   <define-flag _metaschema-xml-id="/flag/tiny/class"
                 _metaschema-json-id="/flag/tiny/class"
                 as-type="string"
                 scope="global"
                 name="class"
                 module="tiny"
                 _base-uri="file:/mnt/c/Users/wap1/Documents/usnistgov/metaschema-xslt/src/testing/tinydata/tiny_metaschema.xml"
                 _key-name="tiny:class">
      <formal-name>Class</formal-name>
      <description>Class or classes.</description>
   </define-flag>
</METASCHEMA>
